require 'rails_helper'
include Warden::Test::Helpers
Warden.test_mode!

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CommentsController, type: :controller do

  let(:user) { create :user, password: 'password'  }

  before do
    allow(@controller).to receive(:current_user).and_return(user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:movie) { create :movie }
  let(:comment) { create :comment, user_id: user.id, movie_id: movie.id }

  let(:valid_attributes) {
    {"body"=>"Good movie", "movie_id"=>movie.id}
  }

  let(:invalid_attributes) {
    {"body"=>"Good movie", "movie_id"=>movie.id+1}
  }

  let(:valid_session) {
    { "commit"=>"Add comments", "controller"=>"comments", "action"=>"create"}
  }

  describe "POST #comments_create" do
    context "with valid params" do
      it "creates a new Comment" do

        expect {
          post :create, xhr: true, params: { comment: valid_attributes }, session: valid_session
        }.to change(Comment, :count).by(1)
      end

      it "not to redirects to the comment view" do
        post :create, xhr: true, params: { comment: valid_attributes }, session: valid_session
        expect(response).not_to redirect_to(comments_url)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' form)" do
        post :create, xhr: true, params: { comment: invalid_attributes }, session: valid_session

        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comment" do
      comment2 = comment
      expect {
        delete :destroy,  xhr: true, params: { controller: "comments", action: "destroy", id: comment2.id }
      }.to change(Comment, :count).by(-1)

    end

    it "redirects to movie show" do
      delete :destroy,  xhr: true, params: { controller: "comments", action: "destroy", id: comment.id }

      expect(response).not_to redirect_to(movies_url)
    end
  end

end
